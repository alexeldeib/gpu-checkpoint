name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable, beta, nightly]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
      if: matrix.rust == 'stable'
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run GPU detection test (mock)
      run: |
        # Create a mock process to test detection
        cargo run -- detect --pid $$ --format json

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release binary
      run: cargo build --release
    
    - name: Create mock GPU process
      run: |
        # Create a test binary that simulates GPU memory allocations
        cat > test_gpu_process.c << 'EOF'
        #include <stdio.h>
        #include <stdlib.h>
        #include <unistd.h>
        #include <fcntl.h>
        #include <sys/mman.h>
        #include <string.h>

        int main() {
            // Simulate opening GPU device files
            int fd = open("/dev/null", O_RDWR);
            if (fd < 0) {
                perror("open");
                return 1;
            }

            // Allocate some memory to simulate GPU allocations
            size_t size = 256 * 1024 * 1024; // 256MB
            void *ptr = mmap(NULL, size, PROT_READ | PROT_WRITE, 
                           MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
            
            if (ptr == MAP_FAILED) {
                perror("mmap");
                return 1;
            }

            // Touch the memory
            memset(ptr, 0, size);

            printf("Test process PID: %d\n", getpid());
            printf("Allocated %zu bytes at %p\n", size, ptr);
            
            // Keep process alive for testing
            sleep(30);
            
            munmap(ptr, size);
            close(fd);
            return 0;
        }
        EOF
        
        gcc -o test_gpu_process test_gpu_process.c
        ./test_gpu_process &
        TEST_PID=$!
        sleep 2
        
        # Run detection on the test process
        ./target/release/gpu-checkpoint detect --pid $TEST_PID --verbose || true
        
        # Clean up
        kill $TEST_PID || true

  # Test cross-platform compilation
  cross-compile:
    name: Cross Compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, aarch64-unknown-linux-gnu]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross
    
    - name: Build for ${{ matrix.target }}
      run: cross build --target ${{ matrix.target }}